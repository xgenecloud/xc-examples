{
  "swagger": "2.0",
  "info": {
    "description": "Create APIs at the speed of your thoughts",
    "version": "1.0.0",
    "title": "XgeneCloud",
    "contact": {}
  },
  "host": "localhost:8081",
  "basePath": "/",
  "tags": [
    {
      "name": "common"
    },
    {
      "name": "Authentication",
      "description": "Everything about User Authentication"
    },
    {
      "name": "actorHasManyfilm_actor",
      "description": "Everything about has many relation"
    },
    {
      "name": "actor",
      "description": "Everything about your actor"
    },
    {
      "name": "addressBelongsTocity",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "addressHasManycustomer",
      "description": "Everything about has many relation"
    },
    {
      "name": "addressHasManystaff",
      "description": "Everything about has many relation"
    },
    {
      "name": "addressHasManystore",
      "description": "Everything about has many relation"
    },
    {
      "name": "address",
      "description": "Everything about your address"
    },
    {
      "name": "categoryHasManyfilm_category",
      "description": "Everything about has many relation"
    },
    {
      "name": "category",
      "description": "Everything about your category"
    },
    {
      "name": "cityBelongsTocountry",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "cityHasManyaddress",
      "description": "Everything about has many relation"
    },
    {
      "name": "city",
      "description": "Everything about your city"
    },
    {
      "name": "countryHasManycity",
      "description": "Everything about has many relation"
    },
    {
      "name": "country",
      "description": "Everything about your country"
    },
    {
      "name": "customerBelongsToaddress",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "customerBelongsTostore",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "customerHasManypayment",
      "description": "Everything about has many relation"
    },
    {
      "name": "customerHasManyrental",
      "description": "Everything about has many relation"
    },
    {
      "name": "customer",
      "description": "Everything about your customer"
    },
    {
      "name": "film_actorBelongsToactor",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "film_actorBelongsTofilm",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "film_actor",
      "description": "Everything about your film_actor"
    },
    {
      "name": "film_categoryBelongsTocategory",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "film_categoryBelongsTofilm",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "film_category",
      "description": "Everything about your film_category"
    },
    {
      "name": "film_text",
      "description": "Everything about your film_text"
    },
    {
      "name": "filmBelongsTolanguage",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "filmHasManyfilm_actor",
      "description": "Everything about has many relation"
    },
    {
      "name": "filmHasManyfilm_category",
      "description": "Everything about has many relation"
    },
    {
      "name": "filmHasManyinventory",
      "description": "Everything about has many relation"
    },
    {
      "name": "film",
      "description": "Everything about your film"
    },
    {
      "name": "inventoryBelongsTofilm",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "inventoryBelongsTostore",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "inventoryHasManyrental",
      "description": "Everything about has many relation"
    },
    {
      "name": "inventory",
      "description": "Everything about your inventory"
    },
    {
      "name": "languageHasManyfilm",
      "description": "Everything about has many relation"
    },
    {
      "name": "language",
      "description": "Everything about your language"
    },
    {
      "name": "notification",
      "description": "Everything about your notification"
    },
    {
      "name": "paymentBelongsTocustomer",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "paymentBelongsTorental",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "paymentBelongsTostaff",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "payment",
      "description": "Everything about your payment"
    },
    {
      "name": "rentalBelongsTocustomer",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "rentalBelongsToinventory",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "rentalBelongsTostaff",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "rentalHasManypayment",
      "description": "Everything about has many relation"
    },
    {
      "name": "rental",
      "description": "Everything about your rental"
    },
    {
      "name": "staffBelongsToaddress",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "staffBelongsTostore",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "staffHasManypayment",
      "description": "Everything about has many relation"
    },
    {
      "name": "staffHasManyrental",
      "description": "Everything about has many relation"
    },
    {
      "name": "staff",
      "description": "Everything about your staff"
    },
    {
      "name": "storeBelongsToaddress",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "storeHasManycustomer",
      "description": "Everything about has many relation"
    },
    {
      "name": "storeHasManyinventory",
      "description": "Everything about has many relation"
    },
    {
      "name": "storeHasManystaff",
      "description": "Everything about has many relation"
    },
    {
      "name": "store",
      "description": "Everything about your store"
    },
    {
      "name": "test",
      "description": "Everything about your test"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Get server health",
        "description": "",
        "operationId": "health",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "process_uptime": "282.6 Seconds",
                "process_memory_usage": {
                  "rss": "46.73 MB",
                  "heapTotal": "24.62 MB",
                  "heapUsed": "19.74 MB",
                  "external": "1.59 MB"
                },
                "os_total_memory": "16384.00 MB",
                "os_free_memory": "826.23 MB",
                "os_load_average": [
                  "3.51",
                  "3.36",
                  "3.24"
                ],
                "v8_heap_statistics": {
                  "total_heap_size": "24.62 MB",
                  "total_heap_size_executable": "0.80 MB",
                  "total_physical_size": "22.25 MB",
                  "total_available_size": "2075.67 MB",
                  "used_heap_size": "19.75 MB",
                  "heap_size_limit": "2096.00 MB",
                  "malloced_memory": "0.09 MB",
                  "peak_malloced_memory": "10.10 MB",
                  "does_zap_garbage": 0,
                  "number_of_native_contexts": 2,
                  "number_of_detached_contexts": 0
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/signin": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Authentication user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userAuth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticated successfully",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User signup",
        "description": "",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/auth/signout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "description": "",
        "operationId": "logout",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout success"
          }
        }
      }
    },
    "/api/v1/auth/password/forgot": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password Forgot",
        "description": "",
        "operationId": "passwordForgot",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "required": true,
                  "example": "test@xgenecloud.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/auth/email/validate/{tokenId}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Email validate link",
        "description": "",
        "operationId": "emailValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/token/validate/{tokenId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Validate password reset token",
        "description": "",
        "operationId": "passwordResetTokenValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/password/reset/": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password reset",
        "description": "",
        "operationId": "passwordReset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reset password details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "password",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully"
          }
        }
      }
    },
    "/api/v1/user/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "USer details",
        "description": "",
        "operationId": "userDetails",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        }
      }
    },
    "/api/v1/user": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "updateUserDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ]
      }
    },
    "/api/v1/user/password/change": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "passwordChange",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Current password and new password",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currentPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "password"
                },
                "newPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "newPassword"
                }
              }
            }
          }
        ]
      }
    },
    "/api/v1/auth/google": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication url",
        "description": "",
        "operationId": "googleAuthentication"
      }
    },
    "/api/v1/auth/facebook": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication url",
        "description": "",
        "operationId": "facebookAuthentication"
      }
    },
    "/api/v1/auth/google/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication callback url",
        "description": "",
        "operationId": "googleAuthenticationCallback"
      }
    },
    "/api/v1/auth/facebook/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication callback url",
        "description": "",
        "operationId": "facebookAuthenticationCallback"
      }
    },
    "/api/v1/actor/has/film_actor": {
      "get": {
        "tags": [
          "actorHasManyfilm_actor"
        ],
        "summary": "Get actor list with film_actor children",
        "description": "",
        "operationId": "actorHasManyfilm_actorList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/actor/{actorId}/film_actor": {
      "get": {
        "tags": [
          "actorHasManyfilm_actor"
        ],
        "summary": "Find film_actor list by parent actor id",
        "description": "Returns a single actor",
        "operationId": "getfilm_actorByactorId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of actor to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "actor not found"
          }
        }
      },
      "post": {
        "tags": [
          "actorHasManyfilm_actor"
        ],
        "summary": "Insert film_actor under a parent actor",
        "description": "Returns a single actor",
        "operationId": "insertfilm_actorByactorId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_actor object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of actor to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/actor/{actorId}/film_actor/{film_actorId}": {
      "get": {
        "tags": [
          "actorHasManyfilm_actor"
        ],
        "summary": "Get by film_actor id parent actor id",
        "description": "Returns a single actor",
        "operationId": "getfilm_actorByIdAndactorId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of parent actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_actorId",
            "in": "path",
            "description": "ID of film_actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "actorHasManyfilm_actor"
        ],
        "summary": "Delete by film_actor id parent actor id",
        "description": "Returns a single actor",
        "operationId": "deletefilm_actorByIdAndactorId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of parent actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_actorId",
            "in": "path",
            "description": "ID of cfilm_actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "actorHasManyfilm_actor"
        ],
        "summary": "Update film_actor under a parent actor",
        "description": "Returns a single actor",
        "operationId": "updatefilm_actorByIdAndactorId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_actor object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of actor to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_actorId",
            "in": "path",
            "description": "ID of film_actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/actor/{actorId}/film_actor/{film_actorId}/exists": {
      "get": {
        "tags": [
          "actorHasManyfilm_actor"
        ],
        "summary": "Check row exists by film_actor id and parent actor id",
        "description": "",
        "operationId": "existsfilm_actorByIdAndactorId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of parent actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_actorId",
            "in": "path",
            "description": "ID of film_actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/actor/{actorId}/film_actor/findOne": {
      "get": {
        "tags": [
          "actorHasManyfilm_actor"
        ],
        "summary": "Find one film_actor by parent actor id and filters",
        "description": "",
        "operationId": "findOnefilm_actorByactorId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of parent actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/actor/{actorId}/film_actor/count": {
      "get": {
        "tags": [
          "actorHasManyfilm_actor"
        ],
        "summary": "Get film_actor count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinactorId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of parent actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/actor": {
      "post": {
        "tags": [
          "actor"
        ],
        "summary": "Add a new actor",
        "description": "",
        "operationId": "addactor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "actor object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/actor"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "actor"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getactor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/actor/{actorId}": {
      "get": {
        "tags": [
          "actor"
        ],
        "summary": "Find actor by ID",
        "description": "Returns a single actor",
        "operationId": "getactorById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of actor to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/actor"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "actor not found"
          }
        }
      },
      "put": {
        "tags": [
          "actor"
        ],
        "summary": "Updates a actor",
        "description": "",
        "operationId": "updateactor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of actor to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "actor object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/actor"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "actor"
        ],
        "summary": "Deletes a actor",
        "description": "",
        "operationId": "deleteactor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of actor to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "actor not found"
          }
        }
      }
    },
    "/api/v1/actor/bulk": {
      "post": {
        "tags": [
          "actor"
        ],
        "summary": "Bulk actor insert",
        "description": "",
        "operationId": "bulkactorInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "actor objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/actor"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "actor"
        ],
        "summary": "Updates a actor",
        "description": "",
        "operationId": "updateactor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "actor objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/actor"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "actor"
        ],
        "summary": "Deletes a actor",
        "description": "",
        "operationId": "deleteactor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "actor objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/actor"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "actor not found"
          }
        }
      }
    },
    "/api/v1/actor/findOne": {
      "get": {
        "tags": [
          "actor"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneactor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/actor"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/actor/{actorId}/exists": {
      "get": {
        "tags": [
          "actor"
        ],
        "summary": "Check actor with provided ID exists",
        "description": "Returns a single actor",
        "operationId": "checkactorExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/actor/count": {
      "get": {
        "tags": [
          "actor"
        ],
        "summary": "Get actor count",
        "operationId": "getactorCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/actor/groupby/{columnName}": {
      "get": {
        "tags": [
          "actor"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "actorGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/actor"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/actor/distribution/{columnName}": {
      "get": {
        "tags": [
          "actor"
        ],
        "summary": "",
        "description": "",
        "operationId": "actorDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/actor/distinct/{columnName}": {
      "get": {
        "tags": [
          "actor"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "actorDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/actor/aggregate/{columnName}": {
      "get": {
        "tags": [
          "actor"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "actorAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/actor"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/address/belongs/city": {
      "get": {
        "tags": [
          "addressBelongsTocity"
        ],
        "summary": "Get address list with city parent",
        "description": "",
        "operationId": "addressWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/address/has/customer": {
      "get": {
        "tags": [
          "addressHasManycustomer"
        ],
        "summary": "Get address list with customer children",
        "description": "",
        "operationId": "addressHasManycustomerList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/customer": {
      "get": {
        "tags": [
          "addressHasManycustomer"
        ],
        "summary": "Find customer list by parent address id",
        "description": "Returns a single address",
        "operationId": "getcustomerByaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "address not found"
          }
        }
      },
      "post": {
        "tags": [
          "addressHasManycustomer"
        ],
        "summary": "Insert customer under a parent address",
        "description": "Returns a single address",
        "operationId": "insertcustomerByaddressId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customer object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/customer/{customerId}": {
      "get": {
        "tags": [
          "addressHasManycustomer"
        ],
        "summary": "Get by customer id parent address id",
        "description": "Returns a single address",
        "operationId": "getcustomerByIdAndaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "addressHasManycustomer"
        ],
        "summary": "Delete by customer id parent address id",
        "description": "Returns a single address",
        "operationId": "deletecustomerByIdAndaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of ccustomer",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "addressHasManycustomer"
        ],
        "summary": "Update customer under a parent address",
        "description": "Returns a single address",
        "operationId": "updatecustomerByIdAndaddressId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customer object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/customer/{customerId}/exists": {
      "get": {
        "tags": [
          "addressHasManycustomer"
        ],
        "summary": "Check row exists by customer id and parent address id",
        "description": "",
        "operationId": "existscustomerByIdAndaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/customer/findOne": {
      "get": {
        "tags": [
          "addressHasManycustomer"
        ],
        "summary": "Find one customer by parent address id and filters",
        "description": "",
        "operationId": "findOnecustomerByaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/customer/count": {
      "get": {
        "tags": [
          "addressHasManycustomer"
        ],
        "summary": "Get customer count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/address/has/staff": {
      "get": {
        "tags": [
          "addressHasManystaff"
        ],
        "summary": "Get address list with staff children",
        "description": "",
        "operationId": "addressHasManystaffList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/staff": {
      "get": {
        "tags": [
          "addressHasManystaff"
        ],
        "summary": "Find staff list by parent address id",
        "description": "Returns a single address",
        "operationId": "getstaffByaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "address not found"
          }
        }
      },
      "post": {
        "tags": [
          "addressHasManystaff"
        ],
        "summary": "Insert staff under a parent address",
        "description": "Returns a single address",
        "operationId": "insertstaffByaddressId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "staff object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/staff/{staffId}": {
      "get": {
        "tags": [
          "addressHasManystaff"
        ],
        "summary": "Get by staff id parent address id",
        "description": "Returns a single address",
        "operationId": "getstaffByIdAndaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "addressHasManystaff"
        ],
        "summary": "Delete by staff id parent address id",
        "description": "Returns a single address",
        "operationId": "deletestaffByIdAndaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of cstaff",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "addressHasManystaff"
        ],
        "summary": "Update staff under a parent address",
        "description": "Returns a single address",
        "operationId": "updatestaffByIdAndaddressId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "staff object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/staff/{staffId}/exists": {
      "get": {
        "tags": [
          "addressHasManystaff"
        ],
        "summary": "Check row exists by staff id and parent address id",
        "description": "",
        "operationId": "existsstaffByIdAndaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/staff/findOne": {
      "get": {
        "tags": [
          "addressHasManystaff"
        ],
        "summary": "Find one staff by parent address id and filters",
        "description": "",
        "operationId": "findOnestaffByaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/staff/count": {
      "get": {
        "tags": [
          "addressHasManystaff"
        ],
        "summary": "Get staff count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/address/has/store": {
      "get": {
        "tags": [
          "addressHasManystore"
        ],
        "summary": "Get address list with store children",
        "description": "",
        "operationId": "addressHasManystoreList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/store": {
      "get": {
        "tags": [
          "addressHasManystore"
        ],
        "summary": "Find store list by parent address id",
        "description": "Returns a single address",
        "operationId": "getstoreByaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "address not found"
          }
        }
      },
      "post": {
        "tags": [
          "addressHasManystore"
        ],
        "summary": "Insert store under a parent address",
        "description": "Returns a single address",
        "operationId": "insertstoreByaddressId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/store/{storeId}": {
      "get": {
        "tags": [
          "addressHasManystore"
        ],
        "summary": "Get by store id parent address id",
        "description": "Returns a single address",
        "operationId": "getstoreByIdAndaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "addressHasManystore"
        ],
        "summary": "Delete by store id parent address id",
        "description": "Returns a single address",
        "operationId": "deletestoreByIdAndaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of cstore",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "addressHasManystore"
        ],
        "summary": "Update store under a parent address",
        "description": "Returns a single address",
        "operationId": "updatestoreByIdAndaddressId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/store/{storeId}/exists": {
      "get": {
        "tags": [
          "addressHasManystore"
        ],
        "summary": "Check row exists by store id and parent address id",
        "description": "",
        "operationId": "existsstoreByIdAndaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/store/findOne": {
      "get": {
        "tags": [
          "addressHasManystore"
        ],
        "summary": "Find one store by parent address id and filters",
        "description": "",
        "operationId": "findOnestoreByaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/address/{addressId}/store/count": {
      "get": {
        "tags": [
          "addressHasManystore"
        ],
        "summary": "Get store count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinaddressId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of parent address",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/address": {
      "post": {
        "tags": [
          "address"
        ],
        "summary": "Add a new address",
        "description": "",
        "operationId": "addaddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "address object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/address"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "address"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getaddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/address/{addressId}": {
      "get": {
        "tags": [
          "address"
        ],
        "summary": "Find address by ID",
        "description": "Returns a single address",
        "operationId": "getaddressById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/address"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "address not found"
          }
        }
      },
      "put": {
        "tags": [
          "address"
        ],
        "summary": "Updates a address",
        "description": "",
        "operationId": "updateaddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "address object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/address"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "address"
        ],
        "summary": "Deletes a address",
        "description": "",
        "operationId": "deleteaddress",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "address not found"
          }
        }
      }
    },
    "/api/v1/address/bulk": {
      "post": {
        "tags": [
          "address"
        ],
        "summary": "Bulk address insert",
        "description": "",
        "operationId": "bulkaddressInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "address objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/address"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "address"
        ],
        "summary": "Updates a address",
        "description": "",
        "operationId": "updateaddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "address objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/address"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "address"
        ],
        "summary": "Deletes a address",
        "description": "",
        "operationId": "deleteaddress",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "address objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/address"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "address not found"
          }
        }
      }
    },
    "/api/v1/address/findOne": {
      "get": {
        "tags": [
          "address"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneaddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/address"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/address/{addressId}/exists": {
      "get": {
        "tags": [
          "address"
        ],
        "summary": "Check address with provided ID exists",
        "description": "Returns a single address",
        "operationId": "checkaddressExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/address/count": {
      "get": {
        "tags": [
          "address"
        ],
        "summary": "Get address count",
        "operationId": "getaddressCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/address/groupby/{columnName}": {
      "get": {
        "tags": [
          "address"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "addressGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/address"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/address/distribution/{columnName}": {
      "get": {
        "tags": [
          "address"
        ],
        "summary": "",
        "description": "",
        "operationId": "addressDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/address/distinct/{columnName}": {
      "get": {
        "tags": [
          "address"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "addressDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/address/aggregate/{columnName}": {
      "get": {
        "tags": [
          "address"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "addressAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/address"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/category/has/film_category": {
      "get": {
        "tags": [
          "categoryHasManyfilm_category"
        ],
        "summary": "Get category list with film_category children",
        "description": "",
        "operationId": "categoryHasManyfilm_categoryList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/category/{categoryId}/film_category": {
      "get": {
        "tags": [
          "categoryHasManyfilm_category"
        ],
        "summary": "Find film_category list by parent category id",
        "description": "Returns a single category",
        "operationId": "getfilm_categoryBycategoryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "category not found"
          }
        }
      },
      "post": {
        "tags": [
          "categoryHasManyfilm_category"
        ],
        "summary": "Insert film_category under a parent category",
        "description": "Returns a single category",
        "operationId": "insertfilm_categoryBycategoryId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_category object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/category/{categoryId}/film_category/{film_categoryId}": {
      "get": {
        "tags": [
          "categoryHasManyfilm_category"
        ],
        "summary": "Get by film_category id parent category id",
        "description": "Returns a single category",
        "operationId": "getfilm_categoryByIdAndcategoryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of parent category",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_categoryId",
            "in": "path",
            "description": "ID of film_category",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "categoryHasManyfilm_category"
        ],
        "summary": "Delete by film_category id parent category id",
        "description": "Returns a single category",
        "operationId": "deletefilm_categoryByIdAndcategoryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of parent category",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_categoryId",
            "in": "path",
            "description": "ID of cfilm_category",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "categoryHasManyfilm_category"
        ],
        "summary": "Update film_category under a parent category",
        "description": "Returns a single category",
        "operationId": "updatefilm_categoryByIdAndcategoryId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_category object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_categoryId",
            "in": "path",
            "description": "ID of film_category",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/category/{categoryId}/film_category/{film_categoryId}/exists": {
      "get": {
        "tags": [
          "categoryHasManyfilm_category"
        ],
        "summary": "Check row exists by film_category id and parent category id",
        "description": "",
        "operationId": "existsfilm_categoryByIdAndcategoryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of parent category",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_categoryId",
            "in": "path",
            "description": "ID of film_category",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/category/{categoryId}/film_category/findOne": {
      "get": {
        "tags": [
          "categoryHasManyfilm_category"
        ],
        "summary": "Find one film_category by parent category id and filters",
        "description": "",
        "operationId": "findOnefilm_categoryBycategoryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of parent category",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/category/{categoryId}/film_category/count": {
      "get": {
        "tags": [
          "categoryHasManyfilm_category"
        ],
        "summary": "Get film_category count by parent id and filter",
        "description": "",
        "operationId": "getCountWithincategoryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of parent category",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/category": {
      "post": {
        "tags": [
          "category"
        ],
        "summary": "Add a new category",
        "description": "",
        "operationId": "addcategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "category object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/category"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getcategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/category/{categoryId}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Find category by ID",
        "description": "Returns a single category",
        "operationId": "getcategoryById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/category"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "category not found"
          }
        }
      },
      "put": {
        "tags": [
          "category"
        ],
        "summary": "Updates a category",
        "description": "",
        "operationId": "updatecategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "category object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/category"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "category"
        ],
        "summary": "Deletes a category",
        "description": "",
        "operationId": "deletecategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "category not found"
          }
        }
      }
    },
    "/api/v1/category/bulk": {
      "post": {
        "tags": [
          "category"
        ],
        "summary": "Bulk category insert",
        "description": "",
        "operationId": "bulkcategoryInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "category objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/category"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "category"
        ],
        "summary": "Updates a category",
        "description": "",
        "operationId": "updatecategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "category objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/category"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "category"
        ],
        "summary": "Deletes a category",
        "description": "",
        "operationId": "deletecategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "category objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/category"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "category not found"
          }
        }
      }
    },
    "/api/v1/category/findOne": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnecategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/category"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/category/{categoryId}/exists": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Check category with provided ID exists",
        "description": "Returns a single category",
        "operationId": "checkcategoryExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of category",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/category/count": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Get category count",
        "operationId": "getcategoryCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/category/groupby/{columnName}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "categoryGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/category"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/category/distribution/{columnName}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "",
        "description": "",
        "operationId": "categoryDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/category/distinct/{columnName}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "categoryDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/category/aggregate/{columnName}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "categoryAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/category"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/city/belongs/country": {
      "get": {
        "tags": [
          "cityBelongsTocountry"
        ],
        "summary": "Get city list with country parent",
        "description": "",
        "operationId": "cityWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/city/has/address": {
      "get": {
        "tags": [
          "cityHasManyaddress"
        ],
        "summary": "Get city list with address children",
        "description": "",
        "operationId": "cityHasManyaddressList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/city/{cityId}/address": {
      "get": {
        "tags": [
          "cityHasManyaddress"
        ],
        "summary": "Find address list by parent city id",
        "description": "Returns a single city",
        "operationId": "getaddressBycityId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of city to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "city not found"
          }
        }
      },
      "post": {
        "tags": [
          "cityHasManyaddress"
        ],
        "summary": "Insert address under a parent city",
        "description": "Returns a single city",
        "operationId": "insertaddressBycityId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "address object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of city to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/city/{cityId}/address/{addressId}": {
      "get": {
        "tags": [
          "cityHasManyaddress"
        ],
        "summary": "Get by address id parent city id",
        "description": "Returns a single city",
        "operationId": "getaddressByIdAndcityId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of parent city",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "cityHasManyaddress"
        ],
        "summary": "Delete by address id parent city id",
        "description": "Returns a single city",
        "operationId": "deleteaddressByIdAndcityId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of parent city",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of caddress",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "cityHasManyaddress"
        ],
        "summary": "Update address under a parent city",
        "description": "Returns a single city",
        "operationId": "updateaddressByIdAndcityId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "address object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of city to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/city/{cityId}/address/{addressId}/exists": {
      "get": {
        "tags": [
          "cityHasManyaddress"
        ],
        "summary": "Check row exists by address id and parent city id",
        "description": "",
        "operationId": "existsaddressByIdAndcityId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of parent city",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "ID of address",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/city/{cityId}/address/findOne": {
      "get": {
        "tags": [
          "cityHasManyaddress"
        ],
        "summary": "Find one address by parent city id and filters",
        "description": "",
        "operationId": "findOneaddressBycityId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of parent city",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/city/{cityId}/address/count": {
      "get": {
        "tags": [
          "cityHasManyaddress"
        ],
        "summary": "Get address count by parent id and filter",
        "description": "",
        "operationId": "getCountWithincityId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of parent city",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/city": {
      "post": {
        "tags": [
          "city"
        ],
        "summary": "Add a new city",
        "description": "",
        "operationId": "addcity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "city object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/city"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "city"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getcity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/city/{cityId}": {
      "get": {
        "tags": [
          "city"
        ],
        "summary": "Find city by ID",
        "description": "Returns a single city",
        "operationId": "getcityById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of city to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/city"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "city not found"
          }
        }
      },
      "put": {
        "tags": [
          "city"
        ],
        "summary": "Updates a city",
        "description": "",
        "operationId": "updatecity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of city to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "city object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/city"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "city"
        ],
        "summary": "Deletes a city",
        "description": "",
        "operationId": "deletecity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of city to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "city not found"
          }
        }
      }
    },
    "/api/v1/city/bulk": {
      "post": {
        "tags": [
          "city"
        ],
        "summary": "Bulk city insert",
        "description": "",
        "operationId": "bulkcityInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "city objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/city"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "city"
        ],
        "summary": "Updates a city",
        "description": "",
        "operationId": "updatecity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "city objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/city"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "city"
        ],
        "summary": "Deletes a city",
        "description": "",
        "operationId": "deletecity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "city objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/city"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "city not found"
          }
        }
      }
    },
    "/api/v1/city/findOne": {
      "get": {
        "tags": [
          "city"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnecity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/city"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/city/{cityId}/exists": {
      "get": {
        "tags": [
          "city"
        ],
        "summary": "Check city with provided ID exists",
        "description": "Returns a single city",
        "operationId": "checkcityExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of city",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/city/count": {
      "get": {
        "tags": [
          "city"
        ],
        "summary": "Get city count",
        "operationId": "getcityCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/city/groupby/{columnName}": {
      "get": {
        "tags": [
          "city"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "cityGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/city"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/city/distribution/{columnName}": {
      "get": {
        "tags": [
          "city"
        ],
        "summary": "",
        "description": "",
        "operationId": "cityDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/city/distinct/{columnName}": {
      "get": {
        "tags": [
          "city"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "cityDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/city/aggregate/{columnName}": {
      "get": {
        "tags": [
          "city"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "cityAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/city"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/country/has/city": {
      "get": {
        "tags": [
          "countryHasManycity"
        ],
        "summary": "Get country list with city children",
        "description": "",
        "operationId": "countryHasManycityList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/country/{countryId}/city": {
      "get": {
        "tags": [
          "countryHasManycity"
        ],
        "summary": "Find city list by parent country id",
        "description": "Returns a single country",
        "operationId": "getcityBycountryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of country to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "country not found"
          }
        }
      },
      "post": {
        "tags": [
          "countryHasManycity"
        ],
        "summary": "Insert city under a parent country",
        "description": "Returns a single country",
        "operationId": "insertcityBycountryId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "city object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of country to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/country/{countryId}/city/{cityId}": {
      "get": {
        "tags": [
          "countryHasManycity"
        ],
        "summary": "Get by city id parent country id",
        "description": "Returns a single country",
        "operationId": "getcityByIdAndcountryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of parent country",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of city",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "countryHasManycity"
        ],
        "summary": "Delete by city id parent country id",
        "description": "Returns a single country",
        "operationId": "deletecityByIdAndcountryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of parent country",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of ccity",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "countryHasManycity"
        ],
        "summary": "Update city under a parent country",
        "description": "Returns a single country",
        "operationId": "updatecityByIdAndcountryId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "city object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of country to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of city",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/country/{countryId}/city/{cityId}/exists": {
      "get": {
        "tags": [
          "countryHasManycity"
        ],
        "summary": "Check row exists by city id and parent country id",
        "description": "",
        "operationId": "existscityByIdAndcountryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of parent country",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "cityId",
            "in": "path",
            "description": "ID of city",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/country/{countryId}/city/findOne": {
      "get": {
        "tags": [
          "countryHasManycity"
        ],
        "summary": "Find one city by parent country id and filters",
        "description": "",
        "operationId": "findOnecityBycountryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of parent country",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/country/{countryId}/city/count": {
      "get": {
        "tags": [
          "countryHasManycity"
        ],
        "summary": "Get city count by parent id and filter",
        "description": "",
        "operationId": "getCountWithincountryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of parent country",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/country": {
      "post": {
        "tags": [
          "country"
        ],
        "summary": "Add a new country",
        "description": "",
        "operationId": "addcountry",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "country object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/country"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getcountry",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/country/{countryId}": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Find country by ID",
        "description": "Returns a single country",
        "operationId": "getcountryById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of country to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/country"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "country not found"
          }
        }
      },
      "put": {
        "tags": [
          "country"
        ],
        "summary": "Updates a country",
        "description": "",
        "operationId": "updatecountry",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of country to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "country object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/country"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "country"
        ],
        "summary": "Deletes a country",
        "description": "",
        "operationId": "deletecountry",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of country to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "country not found"
          }
        }
      }
    },
    "/api/v1/country/bulk": {
      "post": {
        "tags": [
          "country"
        ],
        "summary": "Bulk country insert",
        "description": "",
        "operationId": "bulkcountryInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "country objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/country"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "country"
        ],
        "summary": "Updates a country",
        "description": "",
        "operationId": "updatecountry",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "country objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/country"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "country"
        ],
        "summary": "Deletes a country",
        "description": "",
        "operationId": "deletecountry",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "country objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/country"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "country not found"
          }
        }
      }
    },
    "/api/v1/country/findOne": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnecountry",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/country"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/country/{countryId}/exists": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Check country with provided ID exists",
        "description": "Returns a single country",
        "operationId": "checkcountryExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "description": "ID of country",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/country/count": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Get country count",
        "operationId": "getcountryCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/country/groupby/{columnName}": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "countryGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/country"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/country/distribution/{columnName}": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "",
        "description": "",
        "operationId": "countryDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/country/distinct/{columnName}": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "countryDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/country/aggregate/{columnName}": {
      "get": {
        "tags": [
          "country"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "countryAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/country"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/belongs/address": {
      "get": {
        "tags": [
          "customerBelongsToaddress"
        ],
        "summary": "Get customer list with address parent",
        "description": "",
        "operationId": "customerWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/belongs/store": {
      "get": {
        "tags": [
          "customerBelongsTostore"
        ],
        "summary": "Get customer list with store parent",
        "description": "",
        "operationId": "customerWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/has/payment": {
      "get": {
        "tags": [
          "customerHasManypayment"
        ],
        "summary": "Get customer list with payment children",
        "description": "",
        "operationId": "customerHasManypaymentList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/payment": {
      "get": {
        "tags": [
          "customerHasManypayment"
        ],
        "summary": "Find payment list by parent customer id",
        "description": "Returns a single customer",
        "operationId": "getpaymentBycustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "customer not found"
          }
        }
      },
      "post": {
        "tags": [
          "customerHasManypayment"
        ],
        "summary": "Insert payment under a parent customer",
        "description": "Returns a single customer",
        "operationId": "insertpaymentBycustomerId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payment object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/payment/{paymentId}": {
      "get": {
        "tags": [
          "customerHasManypayment"
        ],
        "summary": "Get by payment id parent customer id",
        "description": "Returns a single customer",
        "operationId": "getpaymentByIdAndcustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customerHasManypayment"
        ],
        "summary": "Delete by payment id parent customer id",
        "description": "Returns a single customer",
        "operationId": "deletepaymentByIdAndcustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of cpayment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "customerHasManypayment"
        ],
        "summary": "Update payment under a parent customer",
        "description": "Returns a single customer",
        "operationId": "updatepaymentByIdAndcustomerId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payment object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/payment/{paymentId}/exists": {
      "get": {
        "tags": [
          "customerHasManypayment"
        ],
        "summary": "Check row exists by payment id and parent customer id",
        "description": "",
        "operationId": "existspaymentByIdAndcustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/payment/findOne": {
      "get": {
        "tags": [
          "customerHasManypayment"
        ],
        "summary": "Find one payment by parent customer id and filters",
        "description": "",
        "operationId": "findOnepaymentBycustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/payment/count": {
      "get": {
        "tags": [
          "customerHasManypayment"
        ],
        "summary": "Get payment count by parent id and filter",
        "description": "",
        "operationId": "getCountWithincustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/customer/has/rental": {
      "get": {
        "tags": [
          "customerHasManyrental"
        ],
        "summary": "Get customer list with rental children",
        "description": "",
        "operationId": "customerHasManyrentalList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/rental": {
      "get": {
        "tags": [
          "customerHasManyrental"
        ],
        "summary": "Find rental list by parent customer id",
        "description": "Returns a single customer",
        "operationId": "getrentalBycustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "customer not found"
          }
        }
      },
      "post": {
        "tags": [
          "customerHasManyrental"
        ],
        "summary": "Insert rental under a parent customer",
        "description": "Returns a single customer",
        "operationId": "insertrentalBycustomerId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/rental/{rentalId}": {
      "get": {
        "tags": [
          "customerHasManyrental"
        ],
        "summary": "Get by rental id parent customer id",
        "description": "Returns a single customer",
        "operationId": "getrentalByIdAndcustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customerHasManyrental"
        ],
        "summary": "Delete by rental id parent customer id",
        "description": "Returns a single customer",
        "operationId": "deleterentalByIdAndcustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of crental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "customerHasManyrental"
        ],
        "summary": "Update rental under a parent customer",
        "description": "Returns a single customer",
        "operationId": "updaterentalByIdAndcustomerId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/rental/{rentalId}/exists": {
      "get": {
        "tags": [
          "customerHasManyrental"
        ],
        "summary": "Check row exists by rental id and parent customer id",
        "description": "",
        "operationId": "existsrentalByIdAndcustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/rental/findOne": {
      "get": {
        "tags": [
          "customerHasManyrental"
        ],
        "summary": "Find one rental by parent customer id and filters",
        "description": "",
        "operationId": "findOnerentalBycustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/rental/count": {
      "get": {
        "tags": [
          "customerHasManyrental"
        ],
        "summary": "Get rental count by parent id and filter",
        "description": "",
        "operationId": "getCountWithincustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of parent customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/customer": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Add a new customer",
        "description": "",
        "operationId": "addcustomer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customer object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customer"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getcustomer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/{customerId}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Find customer by ID",
        "description": "Returns a single customer",
        "operationId": "getcustomerById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/customer"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "customer not found"
          }
        }
      },
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "Updates a customer",
        "description": "",
        "operationId": "updatecustomer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "customer object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customer"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "customer"
        ],
        "summary": "Deletes a customer",
        "description": "",
        "operationId": "deletecustomer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "customer not found"
          }
        }
      }
    },
    "/api/v1/customer/bulk": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Bulk customer insert",
        "description": "",
        "operationId": "bulkcustomerInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customer objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "Updates a customer",
        "description": "",
        "operationId": "updatecustomer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customer objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "customer"
        ],
        "summary": "Deletes a customer",
        "description": "",
        "operationId": "deletecustomer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customer objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "customer not found"
          }
        }
      }
    },
    "/api/v1/customer/findOne": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnecustomer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/customer"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/{customerId}/exists": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Check customer with provided ID exists",
        "description": "Returns a single customer",
        "operationId": "checkcustomerExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/customer/count": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get customer count",
        "operationId": "getcustomerCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/groupby/{columnName}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "customerGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/customer"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/distribution/{columnName}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "",
        "description": "",
        "operationId": "customerDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/distinct/{columnName}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "customerDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/customer/aggregate/{columnName}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "customerAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/customer"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_actor/belongs/actor": {
      "get": {
        "tags": [
          "film_actorBelongsToactor"
        ],
        "summary": "Get film_actor list with actor parent",
        "description": "",
        "operationId": "film_actorWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/film_actor/belongs/film": {
      "get": {
        "tags": [
          "film_actorBelongsTofilm"
        ],
        "summary": "Get film_actor list with film parent",
        "description": "",
        "operationId": "film_actorWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/film_actor": {
      "post": {
        "tags": [
          "film_actor"
        ],
        "summary": "Add a new film_actor",
        "description": "",
        "operationId": "addfilm_actor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_actor object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/film_actor"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "film_actor"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getfilm_actor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_actor/{film_actorId}": {
      "get": {
        "tags": [
          "film_actor"
        ],
        "summary": "Find film_actor by ID",
        "description": "Returns a single film_actor",
        "operationId": "getfilm_actorById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "film_actorId",
            "in": "path",
            "description": "ID of film_actor to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film_actor"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film_actor not found"
          }
        }
      },
      "put": {
        "tags": [
          "film_actor"
        ],
        "summary": "Updates a film_actor",
        "description": "",
        "operationId": "updatefilm_actor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "film_actorId",
            "in": "path",
            "description": "ID of film_actor to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "film_actor object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/film_actor"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "film_actor"
        ],
        "summary": "Deletes a film_actor",
        "description": "",
        "operationId": "deletefilm_actor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "film_actorId",
            "in": "path",
            "description": "ID of film_actor to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film_actor not found"
          }
        }
      }
    },
    "/api/v1/film_actor/bulk": {
      "post": {
        "tags": [
          "film_actor"
        ],
        "summary": "Bulk film_actor insert",
        "description": "",
        "operationId": "bulkfilm_actorInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_actor objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/film_actor"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "film_actor"
        ],
        "summary": "Updates a film_actor",
        "description": "",
        "operationId": "updatefilm_actor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_actor objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/film_actor"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "film_actor"
        ],
        "summary": "Deletes a film_actor",
        "description": "",
        "operationId": "deletefilm_actor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_actor objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/film_actor"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film_actor not found"
          }
        }
      }
    },
    "/api/v1/film_actor/findOne": {
      "get": {
        "tags": [
          "film_actor"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnefilm_actor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film_actor"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_actor/{film_actorId}/exists": {
      "get": {
        "tags": [
          "film_actor"
        ],
        "summary": "Check film_actor with provided ID exists",
        "description": "Returns a single film_actor",
        "operationId": "checkfilm_actorExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "film_actorId",
            "in": "path",
            "description": "ID of film_actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/film_actor/count": {
      "get": {
        "tags": [
          "film_actor"
        ],
        "summary": "Get film_actor count",
        "operationId": "getfilm_actorCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_actor/groupby/{columnName}": {
      "get": {
        "tags": [
          "film_actor"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "film_actorGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film_actor"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_actor/distribution/{columnName}": {
      "get": {
        "tags": [
          "film_actor"
        ],
        "summary": "",
        "description": "",
        "operationId": "film_actorDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_actor/distinct/{columnName}": {
      "get": {
        "tags": [
          "film_actor"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "film_actorDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_actor/aggregate/{columnName}": {
      "get": {
        "tags": [
          "film_actor"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "film_actorAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film_actor"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_category/belongs/category": {
      "get": {
        "tags": [
          "film_categoryBelongsTocategory"
        ],
        "summary": "Get film_category list with category parent",
        "description": "",
        "operationId": "film_categoryWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/film_category/belongs/film": {
      "get": {
        "tags": [
          "film_categoryBelongsTofilm"
        ],
        "summary": "Get film_category list with film parent",
        "description": "",
        "operationId": "film_categoryWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/film_category": {
      "post": {
        "tags": [
          "film_category"
        ],
        "summary": "Add a new film_category",
        "description": "",
        "operationId": "addfilm_category",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_category object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/film_category"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "film_category"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getfilm_category",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_category/{film_categoryId}": {
      "get": {
        "tags": [
          "film_category"
        ],
        "summary": "Find film_category by ID",
        "description": "Returns a single film_category",
        "operationId": "getfilm_categoryById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "film_categoryId",
            "in": "path",
            "description": "ID of film_category to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film_category"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film_category not found"
          }
        }
      },
      "put": {
        "tags": [
          "film_category"
        ],
        "summary": "Updates a film_category",
        "description": "",
        "operationId": "updatefilm_category",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "film_categoryId",
            "in": "path",
            "description": "ID of film_category to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "film_category object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/film_category"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "film_category"
        ],
        "summary": "Deletes a film_category",
        "description": "",
        "operationId": "deletefilm_category",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "film_categoryId",
            "in": "path",
            "description": "ID of film_category to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film_category not found"
          }
        }
      }
    },
    "/api/v1/film_category/bulk": {
      "post": {
        "tags": [
          "film_category"
        ],
        "summary": "Bulk film_category insert",
        "description": "",
        "operationId": "bulkfilm_categoryInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_category objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/film_category"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "film_category"
        ],
        "summary": "Updates a film_category",
        "description": "",
        "operationId": "updatefilm_category",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_category objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/film_category"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "film_category"
        ],
        "summary": "Deletes a film_category",
        "description": "",
        "operationId": "deletefilm_category",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_category objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/film_category"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film_category not found"
          }
        }
      }
    },
    "/api/v1/film_category/findOne": {
      "get": {
        "tags": [
          "film_category"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnefilm_category",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film_category"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_category/{film_categoryId}/exists": {
      "get": {
        "tags": [
          "film_category"
        ],
        "summary": "Check film_category with provided ID exists",
        "description": "Returns a single film_category",
        "operationId": "checkfilm_categoryExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "film_categoryId",
            "in": "path",
            "description": "ID of film_category",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/film_category/count": {
      "get": {
        "tags": [
          "film_category"
        ],
        "summary": "Get film_category count",
        "operationId": "getfilm_categoryCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_category/groupby/{columnName}": {
      "get": {
        "tags": [
          "film_category"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "film_categoryGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film_category"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_category/distribution/{columnName}": {
      "get": {
        "tags": [
          "film_category"
        ],
        "summary": "",
        "description": "",
        "operationId": "film_categoryDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_category/distinct/{columnName}": {
      "get": {
        "tags": [
          "film_category"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "film_categoryDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_category/aggregate/{columnName}": {
      "get": {
        "tags": [
          "film_category"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "film_categoryAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film_category"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_text": {
      "post": {
        "tags": [
          "film_text"
        ],
        "summary": "Add a new film_text",
        "description": "",
        "operationId": "addfilm_text",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_text object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/film_text"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "film_text"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getfilm_text",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_text/{film_textId}": {
      "get": {
        "tags": [
          "film_text"
        ],
        "summary": "Find film_text by ID",
        "description": "Returns a single film_text",
        "operationId": "getfilm_textById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "film_textId",
            "in": "path",
            "description": "ID of film_text to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film_text"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film_text not found"
          }
        }
      },
      "put": {
        "tags": [
          "film_text"
        ],
        "summary": "Updates a film_text",
        "description": "",
        "operationId": "updatefilm_text",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "film_textId",
            "in": "path",
            "description": "ID of film_text to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "film_text object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/film_text"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "film_text"
        ],
        "summary": "Deletes a film_text",
        "description": "",
        "operationId": "deletefilm_text",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "film_textId",
            "in": "path",
            "description": "ID of film_text to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film_text not found"
          }
        }
      }
    },
    "/api/v1/film_text/bulk": {
      "post": {
        "tags": [
          "film_text"
        ],
        "summary": "Bulk film_text insert",
        "description": "",
        "operationId": "bulkfilm_textInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_text objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/film_text"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "film_text"
        ],
        "summary": "Updates a film_text",
        "description": "",
        "operationId": "updatefilm_text",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_text objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/film_text"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "film_text"
        ],
        "summary": "Deletes a film_text",
        "description": "",
        "operationId": "deletefilm_text",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_text objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/film_text"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film_text not found"
          }
        }
      }
    },
    "/api/v1/film_text/findOne": {
      "get": {
        "tags": [
          "film_text"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnefilm_text",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film_text"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_text/{film_textId}/exists": {
      "get": {
        "tags": [
          "film_text"
        ],
        "summary": "Check film_text with provided ID exists",
        "description": "Returns a single film_text",
        "operationId": "checkfilm_textExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "film_textId",
            "in": "path",
            "description": "ID of film_text",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/film_text/count": {
      "get": {
        "tags": [
          "film_text"
        ],
        "summary": "Get film_text count",
        "operationId": "getfilm_textCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_text/groupby/{columnName}": {
      "get": {
        "tags": [
          "film_text"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "film_textGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film_text"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_text/distribution/{columnName}": {
      "get": {
        "tags": [
          "film_text"
        ],
        "summary": "",
        "description": "",
        "operationId": "film_textDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_text/distinct/{columnName}": {
      "get": {
        "tags": [
          "film_text"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "film_textDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film_text/aggregate/{columnName}": {
      "get": {
        "tags": [
          "film_text"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "film_textAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film_text"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film/belongs/language": {
      "get": {
        "tags": [
          "filmBelongsTolanguage"
        ],
        "summary": "Get film list with language parent",
        "description": "",
        "operationId": "filmWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/film/has/film_actor": {
      "get": {
        "tags": [
          "filmHasManyfilm_actor"
        ],
        "summary": "Get film list with film_actor children",
        "description": "",
        "operationId": "filmHasManyfilm_actorList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/film_actor": {
      "get": {
        "tags": [
          "filmHasManyfilm_actor"
        ],
        "summary": "Find film_actor list by parent film id",
        "description": "Returns a single film",
        "operationId": "getfilm_actorByfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film not found"
          }
        }
      },
      "post": {
        "tags": [
          "filmHasManyfilm_actor"
        ],
        "summary": "Insert film_actor under a parent film",
        "description": "Returns a single film",
        "operationId": "insertfilm_actorByfilmId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_actor object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/film_actor/{film_actorId}": {
      "get": {
        "tags": [
          "filmHasManyfilm_actor"
        ],
        "summary": "Get by film_actor id parent film id",
        "description": "Returns a single film",
        "operationId": "getfilm_actorByIdAndfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_actorId",
            "in": "path",
            "description": "ID of film_actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "filmHasManyfilm_actor"
        ],
        "summary": "Delete by film_actor id parent film id",
        "description": "Returns a single film",
        "operationId": "deletefilm_actorByIdAndfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_actorId",
            "in": "path",
            "description": "ID of cfilm_actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "filmHasManyfilm_actor"
        ],
        "summary": "Update film_actor under a parent film",
        "description": "Returns a single film",
        "operationId": "updatefilm_actorByIdAndfilmId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_actor object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_actorId",
            "in": "path",
            "description": "ID of film_actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/film_actor/{film_actorId}/exists": {
      "get": {
        "tags": [
          "filmHasManyfilm_actor"
        ],
        "summary": "Check row exists by film_actor id and parent film id",
        "description": "",
        "operationId": "existsfilm_actorByIdAndfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_actorId",
            "in": "path",
            "description": "ID of film_actor",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/film_actor/findOne": {
      "get": {
        "tags": [
          "filmHasManyfilm_actor"
        ],
        "summary": "Find one film_actor by parent film id and filters",
        "description": "",
        "operationId": "findOnefilm_actorByfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/film_actor/count": {
      "get": {
        "tags": [
          "filmHasManyfilm_actor"
        ],
        "summary": "Get film_actor count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/film/has/film_category": {
      "get": {
        "tags": [
          "filmHasManyfilm_category"
        ],
        "summary": "Get film list with film_category children",
        "description": "",
        "operationId": "filmHasManyfilm_categoryList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/film_category": {
      "get": {
        "tags": [
          "filmHasManyfilm_category"
        ],
        "summary": "Find film_category list by parent film id",
        "description": "Returns a single film",
        "operationId": "getfilm_categoryByfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film not found"
          }
        }
      },
      "post": {
        "tags": [
          "filmHasManyfilm_category"
        ],
        "summary": "Insert film_category under a parent film",
        "description": "Returns a single film",
        "operationId": "insertfilm_categoryByfilmId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_category object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/film_category/{film_categoryId}": {
      "get": {
        "tags": [
          "filmHasManyfilm_category"
        ],
        "summary": "Get by film_category id parent film id",
        "description": "Returns a single film",
        "operationId": "getfilm_categoryByIdAndfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_categoryId",
            "in": "path",
            "description": "ID of film_category",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "filmHasManyfilm_category"
        ],
        "summary": "Delete by film_category id parent film id",
        "description": "Returns a single film",
        "operationId": "deletefilm_categoryByIdAndfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_categoryId",
            "in": "path",
            "description": "ID of cfilm_category",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "filmHasManyfilm_category"
        ],
        "summary": "Update film_category under a parent film",
        "description": "Returns a single film",
        "operationId": "updatefilm_categoryByIdAndfilmId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film_category object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_categoryId",
            "in": "path",
            "description": "ID of film_category",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/film_category/{film_categoryId}/exists": {
      "get": {
        "tags": [
          "filmHasManyfilm_category"
        ],
        "summary": "Check row exists by film_category id and parent film id",
        "description": "",
        "operationId": "existsfilm_categoryByIdAndfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "film_categoryId",
            "in": "path",
            "description": "ID of film_category",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/film_category/findOne": {
      "get": {
        "tags": [
          "filmHasManyfilm_category"
        ],
        "summary": "Find one film_category by parent film id and filters",
        "description": "",
        "operationId": "findOnefilm_categoryByfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/film_category/count": {
      "get": {
        "tags": [
          "filmHasManyfilm_category"
        ],
        "summary": "Get film_category count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/film/has/inventory": {
      "get": {
        "tags": [
          "filmHasManyinventory"
        ],
        "summary": "Get film list with inventory children",
        "description": "",
        "operationId": "filmHasManyinventoryList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/inventory": {
      "get": {
        "tags": [
          "filmHasManyinventory"
        ],
        "summary": "Find inventory list by parent film id",
        "description": "Returns a single film",
        "operationId": "getinventoryByfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film not found"
          }
        }
      },
      "post": {
        "tags": [
          "filmHasManyinventory"
        ],
        "summary": "Insert inventory under a parent film",
        "description": "Returns a single film",
        "operationId": "insertinventoryByfilmId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "inventory object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/inventory/{inventoryId}": {
      "get": {
        "tags": [
          "filmHasManyinventory"
        ],
        "summary": "Get by inventory id parent film id",
        "description": "Returns a single film",
        "operationId": "getinventoryByIdAndfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "filmHasManyinventory"
        ],
        "summary": "Delete by inventory id parent film id",
        "description": "Returns a single film",
        "operationId": "deleteinventoryByIdAndfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of cinventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "filmHasManyinventory"
        ],
        "summary": "Update inventory under a parent film",
        "description": "Returns a single film",
        "operationId": "updateinventoryByIdAndfilmId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "inventory object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/inventory/{inventoryId}/exists": {
      "get": {
        "tags": [
          "filmHasManyinventory"
        ],
        "summary": "Check row exists by inventory id and parent film id",
        "description": "",
        "operationId": "existsinventoryByIdAndfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/inventory/findOne": {
      "get": {
        "tags": [
          "filmHasManyinventory"
        ],
        "summary": "Find one inventory by parent film id and filters",
        "description": "",
        "operationId": "findOneinventoryByfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/film/{filmId}/inventory/count": {
      "get": {
        "tags": [
          "filmHasManyinventory"
        ],
        "summary": "Get inventory count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinfilmId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of parent film",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/film": {
      "post": {
        "tags": [
          "film"
        ],
        "summary": "Add a new film",
        "description": "",
        "operationId": "addfilm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/film"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "film"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getfilm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film/{filmId}": {
      "get": {
        "tags": [
          "film"
        ],
        "summary": "Find film by ID",
        "description": "Returns a single film",
        "operationId": "getfilmById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film not found"
          }
        }
      },
      "put": {
        "tags": [
          "film"
        ],
        "summary": "Updates a film",
        "description": "",
        "operationId": "updatefilm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "film object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/film"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "film"
        ],
        "summary": "Deletes a film",
        "description": "",
        "operationId": "deletefilm",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film not found"
          }
        }
      }
    },
    "/api/v1/film/bulk": {
      "post": {
        "tags": [
          "film"
        ],
        "summary": "Bulk film insert",
        "description": "",
        "operationId": "bulkfilmInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/film"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "film"
        ],
        "summary": "Updates a film",
        "description": "",
        "operationId": "updatefilm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/film"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "film"
        ],
        "summary": "Deletes a film",
        "description": "",
        "operationId": "deletefilm",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/film"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "film not found"
          }
        }
      }
    },
    "/api/v1/film/findOne": {
      "get": {
        "tags": [
          "film"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnefilm",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film/{filmId}/exists": {
      "get": {
        "tags": [
          "film"
        ],
        "summary": "Check film with provided ID exists",
        "description": "Returns a single film",
        "operationId": "checkfilmExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/film/count": {
      "get": {
        "tags": [
          "film"
        ],
        "summary": "Get film count",
        "operationId": "getfilmCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film/groupby/{columnName}": {
      "get": {
        "tags": [
          "film"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "filmGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film/distribution/{columnName}": {
      "get": {
        "tags": [
          "film"
        ],
        "summary": "",
        "description": "",
        "operationId": "filmDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film/distinct/{columnName}": {
      "get": {
        "tags": [
          "film"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "filmDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/film/aggregate/{columnName}": {
      "get": {
        "tags": [
          "film"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "filmAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/film"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/inventory/belongs/film": {
      "get": {
        "tags": [
          "inventoryBelongsTofilm"
        ],
        "summary": "Get inventory list with film parent",
        "description": "",
        "operationId": "inventoryWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/inventory/belongs/store": {
      "get": {
        "tags": [
          "inventoryBelongsTostore"
        ],
        "summary": "Get inventory list with store parent",
        "description": "",
        "operationId": "inventoryWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/inventory/has/rental": {
      "get": {
        "tags": [
          "inventoryHasManyrental"
        ],
        "summary": "Get inventory list with rental children",
        "description": "",
        "operationId": "inventoryHasManyrentalList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/inventory/{inventoryId}/rental": {
      "get": {
        "tags": [
          "inventoryHasManyrental"
        ],
        "summary": "Find rental list by parent inventory id",
        "description": "Returns a single inventory",
        "operationId": "getrentalByinventoryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "inventory not found"
          }
        }
      },
      "post": {
        "tags": [
          "inventoryHasManyrental"
        ],
        "summary": "Insert rental under a parent inventory",
        "description": "Returns a single inventory",
        "operationId": "insertrentalByinventoryId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/inventory/{inventoryId}/rental/{rentalId}": {
      "get": {
        "tags": [
          "inventoryHasManyrental"
        ],
        "summary": "Get by rental id parent inventory id",
        "description": "Returns a single inventory",
        "operationId": "getrentalByIdAndinventoryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of parent inventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "inventoryHasManyrental"
        ],
        "summary": "Delete by rental id parent inventory id",
        "description": "Returns a single inventory",
        "operationId": "deleterentalByIdAndinventoryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of parent inventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of crental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "inventoryHasManyrental"
        ],
        "summary": "Update rental under a parent inventory",
        "description": "Returns a single inventory",
        "operationId": "updaterentalByIdAndinventoryId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/inventory/{inventoryId}/rental/{rentalId}/exists": {
      "get": {
        "tags": [
          "inventoryHasManyrental"
        ],
        "summary": "Check row exists by rental id and parent inventory id",
        "description": "",
        "operationId": "existsrentalByIdAndinventoryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of parent inventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/inventory/{inventoryId}/rental/findOne": {
      "get": {
        "tags": [
          "inventoryHasManyrental"
        ],
        "summary": "Find one rental by parent inventory id and filters",
        "description": "",
        "operationId": "findOnerentalByinventoryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of parent inventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/inventory/{inventoryId}/rental/count": {
      "get": {
        "tags": [
          "inventoryHasManyrental"
        ],
        "summary": "Get rental count by parent id and filter",
        "description": "",
        "operationId": "getCountWithininventoryId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of parent inventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/inventory": {
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Add a new inventory",
        "description": "",
        "operationId": "addinventory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "inventory object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/inventory"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getinventory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/inventory/{inventoryId}": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Find inventory by ID",
        "description": "Returns a single inventory",
        "operationId": "getinventoryById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/inventory"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "inventory not found"
          }
        }
      },
      "put": {
        "tags": [
          "inventory"
        ],
        "summary": "Updates a inventory",
        "description": "",
        "operationId": "updateinventory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "inventory object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/inventory"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "inventory"
        ],
        "summary": "Deletes a inventory",
        "description": "",
        "operationId": "deleteinventory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "inventory not found"
          }
        }
      }
    },
    "/api/v1/inventory/bulk": {
      "post": {
        "tags": [
          "inventory"
        ],
        "summary": "Bulk inventory insert",
        "description": "",
        "operationId": "bulkinventoryInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "inventory objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/inventory"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "inventory"
        ],
        "summary": "Updates a inventory",
        "description": "",
        "operationId": "updateinventory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "inventory objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/inventory"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "inventory"
        ],
        "summary": "Deletes a inventory",
        "description": "",
        "operationId": "deleteinventory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "inventory objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/inventory"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "inventory not found"
          }
        }
      }
    },
    "/api/v1/inventory/findOne": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneinventory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/inventory"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/inventory/{inventoryId}/exists": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Check inventory with provided ID exists",
        "description": "Returns a single inventory",
        "operationId": "checkinventoryExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/inventory/count": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Get inventory count",
        "operationId": "getinventoryCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/inventory/groupby/{columnName}": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "inventoryGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/inventory"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/inventory/distribution/{columnName}": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "",
        "description": "",
        "operationId": "inventoryDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/inventory/distinct/{columnName}": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "inventoryDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/inventory/aggregate/{columnName}": {
      "get": {
        "tags": [
          "inventory"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "inventoryAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/inventory"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/language/has/film": {
      "get": {
        "tags": [
          "languageHasManyfilm"
        ],
        "summary": "Get language list with film children",
        "description": "",
        "operationId": "languageHasManyfilmList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/language/{languageId}/film": {
      "get": {
        "tags": [
          "languageHasManyfilm"
        ],
        "summary": "Find film list by parent language id",
        "description": "Returns a single language",
        "operationId": "getfilmBylanguageId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "languageId",
            "in": "path",
            "description": "ID of language to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "language not found"
          }
        }
      },
      "post": {
        "tags": [
          "languageHasManyfilm"
        ],
        "summary": "Insert film under a parent language",
        "description": "Returns a single language",
        "operationId": "insertfilmBylanguageId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "languageId",
            "in": "path",
            "description": "ID of language to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/language/{languageId}/film/{filmId}": {
      "get": {
        "tags": [
          "languageHasManyfilm"
        ],
        "summary": "Get by film id parent language id",
        "description": "Returns a single language",
        "operationId": "getfilmByIdAndlanguageId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "languageId",
            "in": "path",
            "description": "ID of parent language",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "languageHasManyfilm"
        ],
        "summary": "Delete by film id parent language id",
        "description": "Returns a single language",
        "operationId": "deletefilmByIdAndlanguageId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "languageId",
            "in": "path",
            "description": "ID of parent language",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of cfilm",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "languageHasManyfilm"
        ],
        "summary": "Update film under a parent language",
        "description": "Returns a single language",
        "operationId": "updatefilmByIdAndlanguageId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "film object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "languageId",
            "in": "path",
            "description": "ID of language to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/language/{languageId}/film/{filmId}/exists": {
      "get": {
        "tags": [
          "languageHasManyfilm"
        ],
        "summary": "Check row exists by film id and parent language id",
        "description": "",
        "operationId": "existsfilmByIdAndlanguageId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "languageId",
            "in": "path",
            "description": "ID of parent language",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filmId",
            "in": "path",
            "description": "ID of film",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/language/{languageId}/film/findOne": {
      "get": {
        "tags": [
          "languageHasManyfilm"
        ],
        "summary": "Find one film by parent language id and filters",
        "description": "",
        "operationId": "findOnefilmBylanguageId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "languageId",
            "in": "path",
            "description": "ID of parent language",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/language/{languageId}/film/count": {
      "get": {
        "tags": [
          "languageHasManyfilm"
        ],
        "summary": "Get film count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinlanguageId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "languageId",
            "in": "path",
            "description": "ID of parent language",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/language": {
      "post": {
        "tags": [
          "language"
        ],
        "summary": "Add a new language",
        "description": "",
        "operationId": "addlanguage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "language object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/language"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "language"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getlanguage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/language/{languageId}": {
      "get": {
        "tags": [
          "language"
        ],
        "summary": "Find language by ID",
        "description": "Returns a single language",
        "operationId": "getlanguageById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "languageId",
            "in": "path",
            "description": "ID of language to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/language"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "language not found"
          }
        }
      },
      "put": {
        "tags": [
          "language"
        ],
        "summary": "Updates a language",
        "description": "",
        "operationId": "updatelanguage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "languageId",
            "in": "path",
            "description": "ID of language to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "language object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/language"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "language"
        ],
        "summary": "Deletes a language",
        "description": "",
        "operationId": "deletelanguage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "languageId",
            "in": "path",
            "description": "ID of language to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "language not found"
          }
        }
      }
    },
    "/api/v1/language/bulk": {
      "post": {
        "tags": [
          "language"
        ],
        "summary": "Bulk language insert",
        "description": "",
        "operationId": "bulklanguageInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "language objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/language"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "language"
        ],
        "summary": "Updates a language",
        "description": "",
        "operationId": "updatelanguage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "language objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/language"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "language"
        ],
        "summary": "Deletes a language",
        "description": "",
        "operationId": "deletelanguage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "language objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/language"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "language not found"
          }
        }
      }
    },
    "/api/v1/language/findOne": {
      "get": {
        "tags": [
          "language"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnelanguage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/language"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/language/{languageId}/exists": {
      "get": {
        "tags": [
          "language"
        ],
        "summary": "Check language with provided ID exists",
        "description": "Returns a single language",
        "operationId": "checklanguageExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "languageId",
            "in": "path",
            "description": "ID of language",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/language/count": {
      "get": {
        "tags": [
          "language"
        ],
        "summary": "Get language count",
        "operationId": "getlanguageCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/language/groupby/{columnName}": {
      "get": {
        "tags": [
          "language"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "languageGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/language"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/language/distribution/{columnName}": {
      "get": {
        "tags": [
          "language"
        ],
        "summary": "",
        "description": "",
        "operationId": "languageDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/language/distinct/{columnName}": {
      "get": {
        "tags": [
          "language"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "languageDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/language/aggregate/{columnName}": {
      "get": {
        "tags": [
          "language"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "languageAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/language"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/notification": {
      "post": {
        "tags": [
          "notification"
        ],
        "summary": "Add a new notification",
        "description": "",
        "operationId": "addnotification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "notification object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notification"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getnotification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/notification/{notificationId}": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Find notification by ID",
        "description": "Returns a single notification",
        "operationId": "getnotificationById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "description": "ID of notification to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/notification"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "notification not found"
          }
        }
      },
      "put": {
        "tags": [
          "notification"
        ],
        "summary": "Updates a notification",
        "description": "",
        "operationId": "updatenotification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "description": "ID of notification to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "notification object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/notification"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "notification"
        ],
        "summary": "Deletes a notification",
        "description": "",
        "operationId": "deletenotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "description": "ID of notification to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "notification not found"
          }
        }
      }
    },
    "/api/v1/notification/bulk": {
      "post": {
        "tags": [
          "notification"
        ],
        "summary": "Bulk notification insert",
        "description": "",
        "operationId": "bulknotificationInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "notification objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/notification"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "notification"
        ],
        "summary": "Updates a notification",
        "description": "",
        "operationId": "updatenotification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "notification objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/notification"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "notification"
        ],
        "summary": "Deletes a notification",
        "description": "",
        "operationId": "deletenotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "notification objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/notification"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "notification not found"
          }
        }
      }
    },
    "/api/v1/notification/findOne": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnenotification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/notification"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/notification/{notificationId}/exists": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Check notification with provided ID exists",
        "description": "Returns a single notification",
        "operationId": "checknotificationExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "description": "ID of notification",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/notification/count": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Get notification count",
        "operationId": "getnotificationCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/notification/groupby/{columnName}": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "notificationGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/notification"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/notification/distribution/{columnName}": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "",
        "description": "",
        "operationId": "notificationDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/notification/distinct/{columnName}": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "notificationDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/notification/aggregate/{columnName}": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "notificationAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/notification"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/payment/belongs/customer": {
      "get": {
        "tags": [
          "paymentBelongsTocustomer"
        ],
        "summary": "Get payment list with customer parent",
        "description": "",
        "operationId": "paymentWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/payment/belongs/rental": {
      "get": {
        "tags": [
          "paymentBelongsTorental"
        ],
        "summary": "Get payment list with rental parent",
        "description": "",
        "operationId": "paymentWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/payment/belongs/staff": {
      "get": {
        "tags": [
          "paymentBelongsTostaff"
        ],
        "summary": "Get payment list with staff parent",
        "description": "",
        "operationId": "paymentWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/payment": {
      "post": {
        "tags": [
          "payment"
        ],
        "summary": "Add a new payment",
        "description": "",
        "operationId": "addpayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payment object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/payment"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "payment"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getpayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/payment/{paymentId}": {
      "get": {
        "tags": [
          "payment"
        ],
        "summary": "Find payment by ID",
        "description": "Returns a single payment",
        "operationId": "getpaymentById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "payment not found"
          }
        }
      },
      "put": {
        "tags": [
          "payment"
        ],
        "summary": "Updates a payment",
        "description": "",
        "operationId": "updatepayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "payment object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/payment"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "payment"
        ],
        "summary": "Deletes a payment",
        "description": "",
        "operationId": "deletepayment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "payment not found"
          }
        }
      }
    },
    "/api/v1/payment/bulk": {
      "post": {
        "tags": [
          "payment"
        ],
        "summary": "Bulk payment insert",
        "description": "",
        "operationId": "bulkpaymentInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payment objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/payment"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "payment"
        ],
        "summary": "Updates a payment",
        "description": "",
        "operationId": "updatepayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payment objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/payment"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "payment"
        ],
        "summary": "Deletes a payment",
        "description": "",
        "operationId": "deletepayment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payment objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/payment"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "payment not found"
          }
        }
      }
    },
    "/api/v1/payment/findOne": {
      "get": {
        "tags": [
          "payment"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnepayment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/payment/{paymentId}/exists": {
      "get": {
        "tags": [
          "payment"
        ],
        "summary": "Check payment with provided ID exists",
        "description": "Returns a single payment",
        "operationId": "checkpaymentExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/payment/count": {
      "get": {
        "tags": [
          "payment"
        ],
        "summary": "Get payment count",
        "operationId": "getpaymentCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/payment/groupby/{columnName}": {
      "get": {
        "tags": [
          "payment"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "paymentGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/payment/distribution/{columnName}": {
      "get": {
        "tags": [
          "payment"
        ],
        "summary": "",
        "description": "",
        "operationId": "paymentDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/payment/distinct/{columnName}": {
      "get": {
        "tags": [
          "payment"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "paymentDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/payment/aggregate/{columnName}": {
      "get": {
        "tags": [
          "payment"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "paymentAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rental/belongs/customer": {
      "get": {
        "tags": [
          "rentalBelongsTocustomer"
        ],
        "summary": "Get rental list with customer parent",
        "description": "",
        "operationId": "rentalWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/rental/belongs/inventory": {
      "get": {
        "tags": [
          "rentalBelongsToinventory"
        ],
        "summary": "Get rental list with inventory parent",
        "description": "",
        "operationId": "rentalWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/rental/belongs/staff": {
      "get": {
        "tags": [
          "rentalBelongsTostaff"
        ],
        "summary": "Get rental list with staff parent",
        "description": "",
        "operationId": "rentalWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/rental/has/payment": {
      "get": {
        "tags": [
          "rentalHasManypayment"
        ],
        "summary": "Get rental list with payment children",
        "description": "",
        "operationId": "rentalHasManypaymentList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/rental/{rentalId}/payment": {
      "get": {
        "tags": [
          "rentalHasManypayment"
        ],
        "summary": "Find payment list by parent rental id",
        "description": "Returns a single rental",
        "operationId": "getpaymentByrentalId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rental not found"
          }
        }
      },
      "post": {
        "tags": [
          "rentalHasManypayment"
        ],
        "summary": "Insert payment under a parent rental",
        "description": "Returns a single rental",
        "operationId": "insertpaymentByrentalId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payment object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/rental/{rentalId}/payment/{paymentId}": {
      "get": {
        "tags": [
          "rentalHasManypayment"
        ],
        "summary": "Get by payment id parent rental id",
        "description": "Returns a single rental",
        "operationId": "getpaymentByIdAndrentalId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of parent rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "rentalHasManypayment"
        ],
        "summary": "Delete by payment id parent rental id",
        "description": "Returns a single rental",
        "operationId": "deletepaymentByIdAndrentalId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of parent rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of cpayment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "rentalHasManypayment"
        ],
        "summary": "Update payment under a parent rental",
        "description": "Returns a single rental",
        "operationId": "updatepaymentByIdAndrentalId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payment object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/rental/{rentalId}/payment/{paymentId}/exists": {
      "get": {
        "tags": [
          "rentalHasManypayment"
        ],
        "summary": "Check row exists by payment id and parent rental id",
        "description": "",
        "operationId": "existspaymentByIdAndrentalId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of parent rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/rental/{rentalId}/payment/findOne": {
      "get": {
        "tags": [
          "rentalHasManypayment"
        ],
        "summary": "Find one payment by parent rental id and filters",
        "description": "",
        "operationId": "findOnepaymentByrentalId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of parent rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/rental/{rentalId}/payment/count": {
      "get": {
        "tags": [
          "rentalHasManypayment"
        ],
        "summary": "Get payment count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinrentalId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of parent rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/rental": {
      "post": {
        "tags": [
          "rental"
        ],
        "summary": "Add a new rental",
        "description": "",
        "operationId": "addrental",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rental object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rental"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "rental"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getrental",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rental/{rentalId}": {
      "get": {
        "tags": [
          "rental"
        ],
        "summary": "Find rental by ID",
        "description": "Returns a single rental",
        "operationId": "getrentalById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rental"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rental not found"
          }
        }
      },
      "put": {
        "tags": [
          "rental"
        ],
        "summary": "Updates a rental",
        "description": "",
        "operationId": "updaterental",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "rental object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rental"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "rental"
        ],
        "summary": "Deletes a rental",
        "description": "",
        "operationId": "deleterental",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rental not found"
          }
        }
      }
    },
    "/api/v1/rental/bulk": {
      "post": {
        "tags": [
          "rental"
        ],
        "summary": "Bulk rental insert",
        "description": "",
        "operationId": "bulkrentalInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rental objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rental"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "rental"
        ],
        "summary": "Updates a rental",
        "description": "",
        "operationId": "updaterental",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rental objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rental"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "rental"
        ],
        "summary": "Deletes a rental",
        "description": "",
        "operationId": "deleterental",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rental objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rental"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "rental not found"
          }
        }
      }
    },
    "/api/v1/rental/findOne": {
      "get": {
        "tags": [
          "rental"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnerental",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rental"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rental/{rentalId}/exists": {
      "get": {
        "tags": [
          "rental"
        ],
        "summary": "Check rental with provided ID exists",
        "description": "Returns a single rental",
        "operationId": "checkrentalExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/rental/count": {
      "get": {
        "tags": [
          "rental"
        ],
        "summary": "Get rental count",
        "operationId": "getrentalCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rental/groupby/{columnName}": {
      "get": {
        "tags": [
          "rental"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "rentalGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rental"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rental/distribution/{columnName}": {
      "get": {
        "tags": [
          "rental"
        ],
        "summary": "",
        "description": "",
        "operationId": "rentalDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rental/distinct/{columnName}": {
      "get": {
        "tags": [
          "rental"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "rentalDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/rental/aggregate/{columnName}": {
      "get": {
        "tags": [
          "rental"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "rentalAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/rental"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/staff/belongs/address": {
      "get": {
        "tags": [
          "staffBelongsToaddress"
        ],
        "summary": "Get staff list with address parent",
        "description": "",
        "operationId": "staffWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/belongs/store": {
      "get": {
        "tags": [
          "staffBelongsTostore"
        ],
        "summary": "Get staff list with store parent",
        "description": "",
        "operationId": "staffWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/has/payment": {
      "get": {
        "tags": [
          "staffHasManypayment"
        ],
        "summary": "Get staff list with payment children",
        "description": "",
        "operationId": "staffHasManypaymentList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/{staffId}/payment": {
      "get": {
        "tags": [
          "staffHasManypayment"
        ],
        "summary": "Find payment list by parent staff id",
        "description": "Returns a single staff",
        "operationId": "getpaymentBystaffId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "staff not found"
          }
        }
      },
      "post": {
        "tags": [
          "staffHasManypayment"
        ],
        "summary": "Insert payment under a parent staff",
        "description": "Returns a single staff",
        "operationId": "insertpaymentBystaffId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payment object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/staff/{staffId}/payment/{paymentId}": {
      "get": {
        "tags": [
          "staffHasManypayment"
        ],
        "summary": "Get by payment id parent staff id",
        "description": "Returns a single staff",
        "operationId": "getpaymentByIdAndstaffId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of parent staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "staffHasManypayment"
        ],
        "summary": "Delete by payment id parent staff id",
        "description": "Returns a single staff",
        "operationId": "deletepaymentByIdAndstaffId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of parent staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of cpayment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "staffHasManypayment"
        ],
        "summary": "Update payment under a parent staff",
        "description": "Returns a single staff",
        "operationId": "updatepaymentByIdAndstaffId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payment object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/staff/{staffId}/payment/{paymentId}/exists": {
      "get": {
        "tags": [
          "staffHasManypayment"
        ],
        "summary": "Check row exists by payment id and parent staff id",
        "description": "",
        "operationId": "existspaymentByIdAndstaffId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of parent staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "ID of payment",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/staff/{staffId}/payment/findOne": {
      "get": {
        "tags": [
          "staffHasManypayment"
        ],
        "summary": "Find one payment by parent staff id and filters",
        "description": "",
        "operationId": "findOnepaymentBystaffId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of parent staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/staff/{staffId}/payment/count": {
      "get": {
        "tags": [
          "staffHasManypayment"
        ],
        "summary": "Get payment count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinstaffId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of parent staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/staff/has/rental": {
      "get": {
        "tags": [
          "staffHasManyrental"
        ],
        "summary": "Get staff list with rental children",
        "description": "",
        "operationId": "staffHasManyrentalList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/staff/{staffId}/rental": {
      "get": {
        "tags": [
          "staffHasManyrental"
        ],
        "summary": "Find rental list by parent staff id",
        "description": "Returns a single staff",
        "operationId": "getrentalBystaffId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "staff not found"
          }
        }
      },
      "post": {
        "tags": [
          "staffHasManyrental"
        ],
        "summary": "Insert rental under a parent staff",
        "description": "Returns a single staff",
        "operationId": "insertrentalBystaffId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/staff/{staffId}/rental/{rentalId}": {
      "get": {
        "tags": [
          "staffHasManyrental"
        ],
        "summary": "Get by rental id parent staff id",
        "description": "Returns a single staff",
        "operationId": "getrentalByIdAndstaffId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of parent staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "staffHasManyrental"
        ],
        "summary": "Delete by rental id parent staff id",
        "description": "Returns a single staff",
        "operationId": "deleterentalByIdAndstaffId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of parent staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of crental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "staffHasManyrental"
        ],
        "summary": "Update rental under a parent staff",
        "description": "Returns a single staff",
        "operationId": "updaterentalByIdAndstaffId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "rental object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/staff/{staffId}/rental/{rentalId}/exists": {
      "get": {
        "tags": [
          "staffHasManyrental"
        ],
        "summary": "Check row exists by rental id and parent staff id",
        "description": "",
        "operationId": "existsrentalByIdAndstaffId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of parent staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "rentalId",
            "in": "path",
            "description": "ID of rental",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/staff/{staffId}/rental/findOne": {
      "get": {
        "tags": [
          "staffHasManyrental"
        ],
        "summary": "Find one rental by parent staff id and filters",
        "description": "",
        "operationId": "findOnerentalBystaffId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of parent staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/staff/{staffId}/rental/count": {
      "get": {
        "tags": [
          "staffHasManyrental"
        ],
        "summary": "Get rental count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinstaffId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of parent staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/staff": {
      "post": {
        "tags": [
          "staff"
        ],
        "summary": "Add a new staff",
        "description": "",
        "operationId": "addstaff",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "staff object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/staff"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getstaff",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/staff/{staffId}": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Find staff by ID",
        "description": "Returns a single staff",
        "operationId": "getstaffById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/staff"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "staff not found"
          }
        }
      },
      "put": {
        "tags": [
          "staff"
        ],
        "summary": "Updates a staff",
        "description": "",
        "operationId": "updatestaff",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "staff object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/staff"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "staff"
        ],
        "summary": "Deletes a staff",
        "description": "",
        "operationId": "deletestaff",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "staff not found"
          }
        }
      }
    },
    "/api/v1/staff/bulk": {
      "post": {
        "tags": [
          "staff"
        ],
        "summary": "Bulk staff insert",
        "description": "",
        "operationId": "bulkstaffInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "staff objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/staff"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "staff"
        ],
        "summary": "Updates a staff",
        "description": "",
        "operationId": "updatestaff",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "staff objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/staff"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "staff"
        ],
        "summary": "Deletes a staff",
        "description": "",
        "operationId": "deletestaff",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "staff objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/staff"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "staff not found"
          }
        }
      }
    },
    "/api/v1/staff/findOne": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnestaff",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/staff"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/staff/{staffId}/exists": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Check staff with provided ID exists",
        "description": "Returns a single staff",
        "operationId": "checkstaffExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/staff/count": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Get staff count",
        "operationId": "getstaffCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/staff/groupby/{columnName}": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "staffGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/staff"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/staff/distribution/{columnName}": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "",
        "description": "",
        "operationId": "staffDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/staff/distinct/{columnName}": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "staffDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/staff/aggregate/{columnName}": {
      "get": {
        "tags": [
          "staff"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "staffAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/staff"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/store/belongs/address": {
      "get": {
        "tags": [
          "storeBelongsToaddress"
        ],
        "summary": "Get store list with address parent",
        "description": "",
        "operationId": "storeWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/store/has/customer": {
      "get": {
        "tags": [
          "storeHasManycustomer"
        ],
        "summary": "Get store list with customer children",
        "description": "",
        "operationId": "storeHasManycustomerList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/customer": {
      "get": {
        "tags": [
          "storeHasManycustomer"
        ],
        "summary": "Find customer list by parent store id",
        "description": "Returns a single store",
        "operationId": "getcustomerBystoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "store not found"
          }
        }
      },
      "post": {
        "tags": [
          "storeHasManycustomer"
        ],
        "summary": "Insert customer under a parent store",
        "description": "Returns a single store",
        "operationId": "insertcustomerBystoreId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customer object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/customer/{customerId}": {
      "get": {
        "tags": [
          "storeHasManycustomer"
        ],
        "summary": "Get by customer id parent store id",
        "description": "Returns a single store",
        "operationId": "getcustomerByIdAndstoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "storeHasManycustomer"
        ],
        "summary": "Delete by customer id parent store id",
        "description": "Returns a single store",
        "operationId": "deletecustomerByIdAndstoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of ccustomer",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "storeHasManycustomer"
        ],
        "summary": "Update customer under a parent store",
        "description": "Returns a single store",
        "operationId": "updatecustomerByIdAndstoreId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "customer object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/customer/{customerId}/exists": {
      "get": {
        "tags": [
          "storeHasManycustomer"
        ],
        "summary": "Check row exists by customer id and parent store id",
        "description": "",
        "operationId": "existscustomerByIdAndstoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "ID of customer",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/customer/findOne": {
      "get": {
        "tags": [
          "storeHasManycustomer"
        ],
        "summary": "Find one customer by parent store id and filters",
        "description": "",
        "operationId": "findOnecustomerBystoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/customer/count": {
      "get": {
        "tags": [
          "storeHasManycustomer"
        ],
        "summary": "Get customer count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinstoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/store/has/inventory": {
      "get": {
        "tags": [
          "storeHasManyinventory"
        ],
        "summary": "Get store list with inventory children",
        "description": "",
        "operationId": "storeHasManyinventoryList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/inventory": {
      "get": {
        "tags": [
          "storeHasManyinventory"
        ],
        "summary": "Find inventory list by parent store id",
        "description": "Returns a single store",
        "operationId": "getinventoryBystoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "store not found"
          }
        }
      },
      "post": {
        "tags": [
          "storeHasManyinventory"
        ],
        "summary": "Insert inventory under a parent store",
        "description": "Returns a single store",
        "operationId": "insertinventoryBystoreId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "inventory object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/inventory/{inventoryId}": {
      "get": {
        "tags": [
          "storeHasManyinventory"
        ],
        "summary": "Get by inventory id parent store id",
        "description": "Returns a single store",
        "operationId": "getinventoryByIdAndstoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "storeHasManyinventory"
        ],
        "summary": "Delete by inventory id parent store id",
        "description": "Returns a single store",
        "operationId": "deleteinventoryByIdAndstoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of cinventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "storeHasManyinventory"
        ],
        "summary": "Update inventory under a parent store",
        "description": "Returns a single store",
        "operationId": "updateinventoryByIdAndstoreId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "inventory object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/inventory/{inventoryId}/exists": {
      "get": {
        "tags": [
          "storeHasManyinventory"
        ],
        "summary": "Check row exists by inventory id and parent store id",
        "description": "",
        "operationId": "existsinventoryByIdAndstoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/inventory/findOne": {
      "get": {
        "tags": [
          "storeHasManyinventory"
        ],
        "summary": "Find one inventory by parent store id and filters",
        "description": "",
        "operationId": "findOneinventoryBystoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/inventory/count": {
      "get": {
        "tags": [
          "storeHasManyinventory"
        ],
        "summary": "Get inventory count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinstoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/store/has/staff": {
      "get": {
        "tags": [
          "storeHasManystaff"
        ],
        "summary": "Get store list with staff children",
        "description": "",
        "operationId": "storeHasManystaffList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/staff": {
      "get": {
        "tags": [
          "storeHasManystaff"
        ],
        "summary": "Find staff list by parent store id",
        "description": "Returns a single store",
        "operationId": "getstaffBystoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "store not found"
          }
        }
      },
      "post": {
        "tags": [
          "storeHasManystaff"
        ],
        "summary": "Insert staff under a parent store",
        "description": "Returns a single store",
        "operationId": "insertstaffBystoreId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "staff object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/staff/{staffId}": {
      "get": {
        "tags": [
          "storeHasManystaff"
        ],
        "summary": "Get by staff id parent store id",
        "description": "Returns a single store",
        "operationId": "getstaffByIdAndstoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "storeHasManystaff"
        ],
        "summary": "Delete by staff id parent store id",
        "description": "Returns a single store",
        "operationId": "deletestaffByIdAndstoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of cstaff",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "storeHasManystaff"
        ],
        "summary": "Update staff under a parent store",
        "description": "Returns a single store",
        "operationId": "updatestaffByIdAndstoreId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "staff object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/staff/{staffId}/exists": {
      "get": {
        "tags": [
          "storeHasManystaff"
        ],
        "summary": "Check row exists by staff id and parent store id",
        "description": "",
        "operationId": "existsstaffByIdAndstoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "staffId",
            "in": "path",
            "description": "ID of staff",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/staff/findOne": {
      "get": {
        "tags": [
          "storeHasManystaff"
        ],
        "summary": "Find one staff by parent store id and filters",
        "description": "",
        "operationId": "findOnestaffBystoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/store/{storeId}/staff/count": {
      "get": {
        "tags": [
          "storeHasManystaff"
        ],
        "summary": "Get staff count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinstoreId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of parent store",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/store": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Add a new store",
        "description": "",
        "operationId": "addstore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/store"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getstore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/store/{storeId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find store by ID",
        "description": "Returns a single store",
        "operationId": "getstoreById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/store"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "store not found"
          }
        }
      },
      "put": {
        "tags": [
          "store"
        ],
        "summary": "Updates a store",
        "description": "",
        "operationId": "updatestore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "store object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/store"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Deletes a store",
        "description": "",
        "operationId": "deletestore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "store not found"
          }
        }
      }
    },
    "/api/v1/store/bulk": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Bulk store insert",
        "description": "",
        "operationId": "bulkstoreInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/store"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "store"
        ],
        "summary": "Updates a store",
        "description": "",
        "operationId": "updatestore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/store"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Deletes a store",
        "description": "",
        "operationId": "deletestore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/store"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "store not found"
          }
        }
      }
    },
    "/api/v1/store/findOne": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnestore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/store"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/store/{storeId}/exists": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Check store with provided ID exists",
        "description": "Returns a single store",
        "operationId": "checkstoreExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/store/count": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get store count",
        "operationId": "getstoreCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/store/groupby/{columnName}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "storeGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/store"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/store/distribution/{columnName}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "",
        "description": "",
        "operationId": "storeDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/store/distinct/{columnName}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "storeDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/store/aggregate/{columnName}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "storeAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/store"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/test": {
      "post": {
        "tags": [
          "test"
        ],
        "summary": "Add a new test",
        "description": "",
        "operationId": "addtest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "test object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/test"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "gettest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/test/{testId}": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Find test by ID",
        "description": "Returns a single test",
        "operationId": "gettestById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "description": "ID of test to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/test"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "test not found"
          }
        }
      },
      "put": {
        "tags": [
          "test"
        ],
        "summary": "Updates a test",
        "description": "",
        "operationId": "updatetest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "description": "ID of test to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "test object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/test"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "test"
        ],
        "summary": "Deletes a test",
        "description": "",
        "operationId": "deletetest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "description": "ID of test to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "test not found"
          }
        }
      }
    },
    "/api/v1/test/bulk": {
      "post": {
        "tags": [
          "test"
        ],
        "summary": "Bulk test insert",
        "description": "",
        "operationId": "bulktestInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "test objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/test"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "test"
        ],
        "summary": "Updates a test",
        "description": "",
        "operationId": "updatetest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "test objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/test"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "test"
        ],
        "summary": "Deletes a test",
        "description": "",
        "operationId": "deletetest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "test objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/test"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "test not found"
          }
        }
      }
    },
    "/api/v1/test/findOne": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOnetest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/test"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/test/{testId}/exists": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Check test with provided ID exists",
        "description": "Returns a single test",
        "operationId": "checktestExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "description": "ID of test",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/test/count": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Get test count",
        "operationId": "gettestCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/test/groupby/{columnName}": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "testGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/test"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/test/distribution/{columnName}": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "",
        "description": "",
        "operationId": "testDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/test/distinct/{columnName}": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "testDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/test/aggregate/{columnName}": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "testAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/test"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "definitions": {
    "userAuth": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "nullable": false,
          "example": "test@xgenecloud.com"
        },
        "password": {
          "type": "string",
          "format": "password",
          "nullable": false,
          "example": "password"
        }
      }
    },
    "user": {
      "allOf": [
        {
          "$ref": "#/definitions/userAuth"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "nullable": false,
              "readOnly": true
            },
            "firstname": {
              "type": "string",
              "nullable": false,
              "example": "FirstName"
            },
            "lastname": {
              "type": "string",
              "nullable": false,
              "example": "LastName"
            },
            "roles": {
              "type": "object",
              "readOnly": true
            },
            "created_at": {
              "type": "string",
              "readOnly": true
            },
            "updated_at": {
              "type": "string",
              "readOnly": true
            },
            "email_verified": {
              "type": "boolean",
              "readOnly": true
            }
          }
        }
      ]
    },
    "actor": {
      "type": "object",
      "properties": {
        "actor_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "first_name": {
          "type": "string",
          "nullable": false
        },
        "last_name": {
          "type": "string",
          "nullable": false
        },
        "last_update": {
          "type": "string",
          "nullable": false
        },
        "title4": {
          "type": "integer"
        }
      }
    },
    "address": {
      "type": "object",
      "properties": {
        "address_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "address": {
          "type": "string",
          "nullable": false
        },
        "address2": {
          "type": "string"
        },
        "district": {
          "type": "string",
          "nullable": false
        },
        "city_id": {
          "type": "integer",
          "nullable": false
        },
        "postal_code": {
          "type": "string"
        },
        "phone": {
          "type": "string",
          "nullable": false
        },
        "location": {
          "type": "string",
          "nullable": false
        },
        "last_update": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "category": {
      "type": "object",
      "properties": {
        "category_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "name": {
          "type": "string",
          "nullable": false
        },
        "last_update": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "city": {
      "type": "object",
      "properties": {
        "city_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "city": {
          "type": "string",
          "nullable": false
        },
        "country_id": {
          "type": "integer"
        },
        "last_update": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "country": {
      "type": "object",
      "properties": {
        "country_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "country": {
          "type": "string",
          "nullable": false
        },
        "last_update": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "customer": {
      "type": "object",
      "properties": {
        "customer_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "store_id": {
          "type": "integer",
          "nullable": false
        },
        "first_name": {
          "type": "string",
          "nullable": false
        },
        "last_name": {
          "type": "string",
          "nullable": false
        },
        "email": {
          "type": "string"
        },
        "address_id": {
          "type": "integer",
          "nullable": false
        },
        "active": {
          "type": "integer",
          "nullable": false
        },
        "create_date": {
          "type": "string",
          "nullable": false
        },
        "last_update": {
          "type": "string"
        }
      }
    },
    "film_actor": {
      "type": "object",
      "properties": {
        "actor_id": {
          "type": "integer",
          "nullable": false
        },
        "film_id": {
          "type": "integer",
          "nullable": false
        },
        "last_update": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "film_category": {
      "type": "object",
      "properties": {
        "film_id": {
          "type": "integer",
          "nullable": false
        },
        "category_id": {
          "type": "integer",
          "nullable": false
        },
        "last_update": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "film_text": {
      "type": "object",
      "properties": {
        "film_id": {
          "type": "integer",
          "nullable": false
        },
        "title": {
          "type": "string",
          "nullable": false
        },
        "description": {
          "type": "string"
        }
      }
    },
    "film": {
      "type": "object",
      "properties": {
        "film_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "title": {
          "type": "string",
          "nullable": false
        },
        "description": {
          "type": "string"
        },
        "release_year": {
          "type": "string"
        },
        "language_id": {
          "type": "integer",
          "nullable": false
        },
        "original_language_id": {
          "type": "integer"
        },
        "rental_duration": {
          "type": "integer",
          "nullable": false
        },
        "rental_rate": {
          "type": "number",
          "nullable": false
        },
        "length": {
          "type": "integer"
        },
        "replacement_cost": {
          "type": "number",
          "nullable": false
        },
        "rating": {
          "type": "string"
        },
        "special_features": {
          "type": "string"
        },
        "last_update": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "inventory": {
      "type": "object",
      "properties": {
        "inventory_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "film_id": {
          "type": "integer",
          "nullable": false
        },
        "store_id": {
          "type": "integer",
          "nullable": false
        },
        "last_update": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "language": {
      "type": "object",
      "properties": {
        "language_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "name": {
          "type": "string",
          "nullable": false
        },
        "last_update": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "notification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "title": {
          "type": "string",
          "nullable": false
        },
        "body": {
          "type": "string"
        }
      }
    },
    "payment": {
      "type": "object",
      "properties": {
        "payment_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "customer_id": {
          "type": "integer",
          "nullable": false
        },
        "staff_id": {
          "type": "integer",
          "nullable": false
        },
        "rental_id": {
          "type": "integer"
        },
        "amount": {
          "type": "number",
          "nullable": false
        },
        "payment_date": {
          "type": "string",
          "nullable": false
        },
        "last_update": {
          "type": "string"
        }
      }
    },
    "rental": {
      "type": "object",
      "properties": {
        "rental_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "rental_date": {
          "type": "string",
          "nullable": false
        },
        "inventory_id": {
          "type": "integer",
          "nullable": false
        },
        "customer_id": {
          "type": "integer",
          "nullable": false
        },
        "return_date": {
          "type": "string"
        },
        "staff_id": {
          "type": "integer",
          "nullable": false
        },
        "last_update": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "staff": {
      "type": "object",
      "properties": {
        "staff_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "first_name": {
          "type": "string",
          "nullable": false
        },
        "last_name": {
          "type": "string",
          "nullable": false
        },
        "address_id": {
          "type": "integer",
          "nullable": false
        },
        "picture": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "store_id": {
          "type": "integer",
          "nullable": false
        },
        "active": {
          "type": "integer",
          "nullable": false
        },
        "username": {
          "type": "string",
          "nullable": false
        },
        "password": {
          "type": "string"
        },
        "last_update": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "store": {
      "type": "object",
      "properties": {
        "store_id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "manager_staff_id": {
          "type": "integer",
          "nullable": false
        },
        "address_id": {
          "type": "integer",
          "nullable": false
        },
        "last_update": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "test": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "title": {
          "type": "string",
          "nullable": false
        },
        "title1": {
          "type": "integer"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about XgeneCloud",
    "url": "http://xgenecloud.com"
  }
}